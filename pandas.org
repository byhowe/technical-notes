:PROPERTIES:
:ID:       ea3b77bb-cdbd-40f5-950b-9a588feac7fc
:ROAM_ALIASES: pandas
:END:
#+title: Pandas

* ~Series~
One dimentional ~ndarray~ (N-dimentional array) with axis labels.
+ ~index~: Pandas represents ~Series~ as a numerical array. ~index~ is stored
  seperately.
** Create from ~list~
#+begin_src python
years = [1776, 1867, 1821]
countries = ['USA', 'Canada', 'Mexico']
indep = pd.Series(data=years, index=countries)
indep
# USA       1776
# Canada    1867
# Mexico    1821
# dtype: int64

indep['USA'] # or indep[0]
# 1776
#+end_src

** Create from ~dict~
#+begin_src python
pd.Series({ 'Sam': 5, 'Frank': 10, 'Spike': 7 })
# Sam       5
# Frank    10
# Spike     7
# dtype: int64
#+end_src

** Properties of ~Series~
#+begin_src python
q1 = { 'Japan': 80, 'China': 450, 'India': 200, 'USA': 250 }
q2 = { 'Brazil': 100,'China': 500, 'India': 210,'USA': 260 }
sales_Q1 = pd.Series(q1)
sales_Q2 = pd.Series(q2)
#+end_src

*** Index keys
#+begin_src python
sales_Q2.keys()
# Index(['Brazil', 'China', 'India', 'USA'], dtype='object')
#+end_src

*** Broadcasting
Same as in numpy.
#+begin_src python
sales_Q1 * 3
# Japan     240
# China    1350
# India     600
# USA       750
# dtype: int64
#+end_src

*** ~+~, ~-~, ~/~, ~*~
Pandas uses ~NaN~ for missing values.
#+begin_src python
sales_Q1 + sales_Q2
# Brazil      NaN
# China     950.0
# India     410.0
# Japan       NaN
# USA       510.0
# dtype: float64
#+end_src

- Use ~.add()~ (or other operator methods) to specify a ~fill_value~.
#+begin_src python
sales_Q1.add(sales_Q2, fill_value=0)
# Brazil    100.0
# China     950.0
# India     410.0
# Japan      80.0
# USA       510.0
# dtype: float64
#+end_src
