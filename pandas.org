:PROPERTIES:
:ID:       ea3b77bb-cdbd-40f5-950b-9a588feac7fc
:ROAM_ALIASES: pandas
:END:
#+title: Pandas

* ~Series~
One dimentional ~ndarray~ (N-dimentional array) with axis labels.
+ ~index~: Pandas represents ~Series~ as a numerical array. ~index~ is stored
  seperately.
** Create from ~list~
#+begin_src python  :session :exports both
years = [1776, 1867, 1821]
countries = ['USA', 'Canada', 'Mexico']
indep = pd.Series(data=years, index=countries)
indep
# USA       1776
# Canada    1867
# Mexico    1821
# dtype: int64

indep['USA'] # or indep[0]
# 1776
#+end_src

** Create from ~dict~
#+begin_src python  :session :exports both
pd.Series({ 'Sam': 5, 'Frank': 10, 'Spike': 7 })
# Sam       5
# Frank    10
# Spike     7
# dtype: int64
#+end_src

** Properties of ~Series~
#+begin_src python  :session :exports both
q1 = { 'Japan': 80, 'China': 450, 'India': 200, 'USA': 250 }
q2 = { 'Brazil': 100,'China': 500, 'India': 210,'USA': 260 }
sales_Q1 = pd.Series(q1)
sales_Q2 = pd.Series(q2)
#+end_src

*** Index keys
#+begin_src python  :session :exports both
sales_Q2.keys()
# Index(['Brazil', 'China', 'India', 'USA'], dtype='object')
#+end_src

*** Broadcasting
Same as in numpy.
#+begin_src python  :session :exports both
sales_Q1 * 3
# Japan     240
# China    1350
# India     600
# USA       750
# dtype: int64
#+end_src

*** ~+~, ~-~, ~/~, ~*~
Pandas uses ~NaN~ for missing values.
#+begin_src python  :session :exports both
sales_Q1 + sales_Q2
# Brazil      NaN
# China     950.0
# India     410.0
# Japan       NaN
# USA       510.0
# dtype: float64
#+end_src

- Use ~.add()~ (or other operator methods) to specify a ~fill_value~.
#+begin_src python  :session :exports both
sales_Q1.add(sales_Q2, fill_value=0)
# Brazil    100.0
# China     950.0
# India     410.0
# Japan      80.0
# USA       510.0
# dtype: float64
#+end_src

* ~DataFrame~
A group of ~Series~ objects that share the same index.
** Creating a DataFrame
#+begin_src python  :session :exports both
d = np.random.randint(0, 100, (4, 3))
i = np.array(['CA', 'NY', 'AZ', 'TX'], dtype='U2')
c = np.array(['Jan', 'Feb', 'Mar'], dtype='U3')
df = pd.DataFrame(d, index=i, columns=c)
# <class 'pandas.core.frame.DataFrame'>
# Index: 4 entries, CA to TX
# Data columns (total 3 columns):
#  #   Column  Non-Null Count  Dtype
# ---  ------  --------------  -----
#  0   Jan     4 non-null      int64
#  1   Feb     4 non-null      int64
#  2   Mar     4 non-null      int64
# dtypes: int64(3)
# memory usage: 128.0+ bytes
df.info()
#+end_src

** Attributes and methods of a DataFrame
- ~columns~
#+begin_src python  :session :exports both
df.columns
# Index(['Jan', 'Feb', 'Mar'], dtype='object')
#+end_src
- ~index~
#+begin_src python  :session :exports both
df.index
# Index(['CA', 'NY', 'AZ', 'TX'], dtype='object')
#+end_src
- ~head~, ~tail~
  First or last 5 rows. Count may be changed.
- ~info~
  Gives information about a dataframe.
- ~describe~
  Gives basic statistical information on numerical columns.
#+begin_src python  :session :exports both
df.describe()
#             Jan        Feb        Mar
# count   4.00000   4.000000   4.000000
# mean   31.25000  40.250000  46.750000
# std    26.33597  29.010056  39.852854
# min     9.00000  15.000000   5.000000
# 25%    16.50000  26.250000  18.500000
# 50%    23.50000  32.000000  45.000000
# 75%    38.25000  46.000000  73.250000
# max    69.00000  82.000000  92.000000
#+end_src
- ~transpose~
  Transpose (or flip) columns and rows.
#+begin_src python  :session :exports both
df.describe().transpose()
#      count   mean        std   min    25%   50%    75%   max
# Jan    4.0  31.25  26.335970   9.0  16.50  23.5  38.25  69.0
# Feb    4.0  40.25  29.010056  15.0  26.25  32.0  46.00  82.0
# Mar    4.0  46.75  39.852854   5.0  18.50  45.0  73.25  92.0
#+end_src
- ~drop~
  Drops a row or a column depending on the axis.
#+begin_src python  :session :exports both
df.drop('Mar', axis=1) # axis=0 row, axis=1 column
#     Jan  Feb
# CA   89   69
# NY   68   38
# AZ   10   24
# TX   35   18
df.drop('Mar', axis=1, inplace=True)
#+end_src
  ~inplace~ may be used to permenantly delete. However, there are signs it will
  be deprecated. Assigning the resulting dataframe to itself is more preferable.
** Columns
*** Indexing
- Grab a single column. Returns a pandas Series.
#+begin_src python  :session :exports both
df['Jan']
# CA    69
# NY    19
# AZ     9
# TX    28
# Name: Jan, dtype: int64
type(df['Jan'])
# <class 'pandas.core.series.Series'>
#+end_src
- Grab multiple columns.
#+begin_src python  :session :exports both
df[['Jan', 'Feb']]
type(df[['Jan', 'Feb']])
# <class 'pandas.core.frame.DataFrame'>
#+end_src
*** Assign new columns
#+begin_src python  :session :exports both
df['Z Feb'] = np.round((df['Feb'] - df['Feb'].mean()) / df['Feb'].std(), 2)
df['Z Feb']
#     Jan  Feb  Mar  Z Feb
# CA   89   69   86   1.39
# NY   68   38   61   0.03
# AZ   10   24   31  -0.58
# TX   35   18   30  -0.85
#+end_src
** Rows
*** Changing the index
Any primary key may be used as an index.
#+begin_src python  :session :exports both
df.set_index('Payment ID').head()
#             total_bill   tip     sex smoker  ... size price_per_person          Payer Name         CC Number
# Payment ID                                   ...
# Sun2959          16.99  1.01  Female     No  ...    2             8.49  Christy Cunningham  3560325168603410
# Sun4608          10.34  1.66    Male     No  ...    3             3.45      Douglas Tucker  4478071379779230
# Sun4458          21.01  3.50    Male     No  ...    3             7.00      Travis Walters  6011812112971322
# Sun5260          23.68  3.31    Male     No  ...    2            11.84    Nathaniel Harris  4676137647685994
# Sun2251          24.59  3.61  Female     No  ...    4             6.15        Tonya Carter  4832732618637221
#
# [5 rows x 10 columns]
#+end_src
To reset index.
#+begin_src python  :session :exports both
df.reset_index().head()
#    index  total_bill   tip     sex smoker  ... size price_per_person          Payer Name         CC Number Payment ID
# 0      0       16.99  1.01  Female     No  ...    2             8.49  Christy Cunningham  3560325168603410    Sun2959
# 1      1       10.34  1.66    Male     No  ...    3             3.45      Douglas Tucker  4478071379779230    Sun4608
# 2      2       21.01  3.50    Male     No  ...    3             7.00      Travis Walters  6011812112971322    Sun4458
# 3      3       23.68  3.31    Male     No  ...    2            11.84    Nathaniel Harris  4676137647685994    Sun5260
# 4      4       24.59  3.61  Female     No  ...    4             6.15        Tonya Carter  4832732618637221    Sun2251
#
# [5 rows x 12 columns]
#+end_src
*** Querying based on index
- Integer based indexing.
#+begin_src python  :session :exports both
df.iloc[0]
# total_bill                       16.99
# tip                               1.01
# sex                             Female
# smoker                              No
# day                                Sun
# time                            Dinner
# size                                 2
# price_per_person                  8.49
# Payer Name          Christy Cunningham
# CC Number             3560325168603410
# Payment ID                     Sun2959
# Name: 0, dtype: object
#+end_src
- Label based indexing.
#+begin_src python  :session :exports both
df.loc["Sun2959"]
# total_bill                       16.99
# tip                               1.01
# sex                             Female
# smoker                              No
# day                                Sun
# time                            Dinner
# size                                 2
# price_per_person                  8.49
# Payer Name          Christy Cunningham
# CC Number             3560325168603410
# Name: Sun2959, dtype: object
#+end_src
- Indexing multiple rows.
#+begin_src python  :session :exports both
df.iloc[0:4] # pythonic slicing may be used
df.loc[['Sun2959', 'Sun5260']]
#+end_src
*** Appending rows
- ~.append()~ method has been deprecated. Use ~.concat()~ instead.
#+begin_src python  :session :exports both
row = df.iloc[0]
pd.concat([df, row.to_frame().T])
#+end_src
